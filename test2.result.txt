


KEYWORD			import
IDENTIFIER		sys
LINEBREAK
KEYWORD			import
IDENTIFIER		heapq
LINEBREAK
KEYWORD			import
IDENTIFIER		math
LINEBREAK
IDENTIFIER		v
COMMA			,
IDENTIFIER		e
COMMA			,
IDENTIFIER		turning_point
OPERATOR		=
IDENTIFIER		map
LEFT_PARENTHESIS	(
IDENTIFIER		int
COMMA			,
IDENTIFIER		sys
DOT			.
IDENTIFIER		stdin
DOT			.
IDENTIFIER		readline
LEFT_PARENTHESIS	(
RIGHT_PARENTHESIS	)
DOT			.
IDENTIFIER		split
LEFT_PARENTHESIS	(
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
LINEBREAK
IDENTIFIER		graph
OPERATOR		=
LEFT_BRACKET		[
LEFT_BRACKET		[
RIGHT_BRACKET		]
KEYWORD			for
IDENTIFIER		_
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		v
OPERATOR		+
DECIMAL_INT_LITERAL	1
RIGHT_PARENTHESIS	)
RIGHT_BRACKET		]
LINEBREAK
IDENTIFIER		reversed_graph
OPERATOR		=
LEFT_BRACKET		[
LEFT_BRACKET		[
RIGHT_BRACKET		]
KEYWORD			for
IDENTIFIER		_
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		v
OPERATOR		+
DECIMAL_INT_LITERAL	1
RIGHT_PARENTHESIS	)
RIGHT_BRACKET		]
LINEBREAK
KEYWORD			for
IDENTIFIER		_
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		e
RIGHT_PARENTHESIS	)
COLON			:
LINEBREAK
INDENT			depth=1
IDENTIFIER		start
COMMA			,
IDENTIFIER		end
COMMA			,
IDENTIFIER		weight
OPERATOR		=
IDENTIFIER		map
LEFT_PARENTHESIS	(
IDENTIFIER		int
COMMA			,
IDENTIFIER		sys
DOT			.
IDENTIFIER		stdin
DOT			.
IDENTIFIER		readline
LEFT_PARENTHESIS	(
RIGHT_PARENTHESIS	)
DOT			.
IDENTIFIER		split
LEFT_PARENTHESIS	(
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
LINEBREAK
INDENT			depth=1
IDENTIFIER		graph
LEFT_BRACKET		[
IDENTIFIER		start
RIGHT_BRACKET		]
DOT			.
IDENTIFIER		append
LEFT_PARENTHESIS	(
LEFT_PARENTHESIS	(
IDENTIFIER		end
COMMA			,
IDENTIFIER		weight
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
LINEBREAK
INDENT			depth=1
IDENTIFIER		reversed_graph
LEFT_BRACKET		[
IDENTIFIER		end
RIGHT_BRACKET		]
DOT			.
IDENTIFIER		append
LEFT_PARENTHESIS	(
LEFT_PARENTHESIS	(
IDENTIFIER		start
COMMA			,
IDENTIFIER		weight
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
LINEBREAK
KEYWORD			def
IDENTIFIER		dijkstra
LEFT_PARENTHESIS	(
IDENTIFIER		graph
COMMA			,
IDENTIFIER		turning_point
RIGHT_PARENTHESIS	)
COLON			:
LINEBREAK
INDENT			depth=1
IDENTIFIER		visited
OPERATOR		=
LEFT_BRACKET		[
KEYWORD			False
KEYWORD			for
IDENTIFIER		_
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		len
LEFT_PARENTHESIS	(
IDENTIFIER		graph
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
RIGHT_BRACKET		]
LINEBREAK
INDENT			depth=1
IDENTIFIER		pqueue
OPERATOR		=
LEFT_BRACKET		[
LEFT_PARENTHESIS	(
DECIMAL_INT_LITERAL	0
COMMA			,
IDENTIFIER		turning_point
RIGHT_PARENTHESIS	)
RIGHT_BRACKET		]
LINEBREAK
INDENT			depth=1
IDENTIFIER		heapq
DOT			.
IDENTIFIER		heapify
LEFT_PARENTHESIS	(
IDENTIFIER		pqueue
RIGHT_PARENTHESIS	)
LINEBREAK
INDENT			depth=1
IDENTIFIER		distances
OPERATOR		=
LEFT_BRACKET		[
IDENTIFIER		math
DOT			.
IDENTIFIER		inf
KEYWORD			for
IDENTIFIER		_
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		len
LEFT_PARENTHESIS	(
IDENTIFIER		graph
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
RIGHT_BRACKET		]
LINEBREAK
INDENT			depth=1
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		turning_point
RIGHT_BRACKET		]
OPERATOR		=
DECIMAL_INT_LITERAL	0
LINEBREAK
INDENT			depth=1
KEYWORD			while
IDENTIFIER		pqueue
COLON			:
LINEBREAK
INDENT			depth=2
IDENTIFIER		_
COMMA			,
IDENTIFIER		current_node
OPERATOR		=
IDENTIFIER		heapq
DOT			.
IDENTIFIER		heappop
LEFT_PARENTHESIS	(
IDENTIFIER		pqueue
RIGHT_PARENTHESIS	)
LINEBREAK
INDENT			depth=2
KEYWORD			if
IDENTIFIER		visited
LEFT_BRACKET		[
IDENTIFIER		current_node
RIGHT_BRACKET		]
COLON			:
LINEBREAK
INDENT			depth=3
KEYWORD			continue
LINEBREAK
INDENT			depth=2
IDENTIFIER		visited
LEFT_BRACKET		[
IDENTIFIER		current_node
RIGHT_BRACKET		]
OPERATOR		=
KEYWORD			True
LINEBREAK
INDENT			depth=2
KEYWORD			for
IDENTIFIER		next_node
COMMA			,
IDENTIFIER		weight
KEYWORD			in
IDENTIFIER		graph
LEFT_BRACKET		[
IDENTIFIER		current_node
RIGHT_BRACKET		]
COLON			:
LINEBREAK
INDENT			depth=3
KEYWORD			if
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		current_node
RIGHT_BRACKET		]
OPERATOR		+
IDENTIFIER		weight
OPERATOR		<
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		next_node
RIGHT_BRACKET		]
COLON			:
LINEBREAK
INDENT			depth=4
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		next_node
RIGHT_BRACKET		]
OPERATOR		=
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		current_node
RIGHT_BRACKET		]
OPERATOR		+
IDENTIFIER		weight
LINEBREAK
INDENT			depth=4
IDENTIFIER		heapq
DOT			.
IDENTIFIER		heappush
LEFT_PARENTHESIS	(
IDENTIFIER		pqueue
COMMA			,
LEFT_PARENTHESIS	(
IDENTIFIER		distances
LEFT_BRACKET		[
IDENTIFIER		next_node
RIGHT_BRACKET		]
COMMA			,
IDENTIFIER		next_node
RIGHT_PARENTHESIS	)
RIGHT_PARENTHESIS	)
LINEBREAK
INDENT			depth=1
KEYWORD			return
IDENTIFIER		distances
LEFT_BRACKET		[
DECIMAL_INT_LITERAL	1
COLON			:
RIGHT_BRACKET		]
LINEBREAK
IDENTIFIER		distances_go
OPERATOR		=
IDENTIFIER		dijkstra
LEFT_PARENTHESIS	(
IDENTIFIER		reversed_graph
COMMA			,
IDENTIFIER		turning_point
RIGHT_PARENTHESIS	)
LINEBREAK
IDENTIFIER		distances_back
OPERATOR		=
IDENTIFIER		dijkstra
LEFT_PARENTHESIS	(
IDENTIFIER		graph
COMMA			,
IDENTIFIER		turning_point
RIGHT_PARENTHESIS	)
LINEBREAK
IDENTIFIER		result
OPERATOR		=
DECIMAL_INT_LITERAL	0
LINEBREAK
KEYWORD			for
IDENTIFIER		i
KEYWORD			in
IDENTIFIER		range
LEFT_PARENTHESIS	(
IDENTIFIER		v
RIGHT_PARENTHESIS	)
COLON			:
LINEBREAK
INDENT			depth=1
IDENTIFIER		result
OPERATOR		=
IDENTIFIER		max
LEFT_PARENTHESIS	(
IDENTIFIER		result
COMMA			,
IDENTIFIER		distances_go
LEFT_BRACKET		[
IDENTIFIER		i
RIGHT_BRACKET		]
OPERATOR		+
IDENTIFIER		distances_back
LEFT_BRACKET		[
IDENTIFIER		i
RIGHT_BRACKET		]
RIGHT_PARENTHESIS	)
LINEBREAK
IDENTIFIER		print
LEFT_PARENTHESIS	(
IDENTIFIER		result
RIGHT_PARENTHESIS	)
LINEBREAK
